{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1sgWz__OSfBmSzMy5jMQ6kuRqrWvS58II","authorship_tag":"ABX9TyNaDjj+UHm3A4e7hmMDn/z3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"collapsed":true,"id":"US6KIwpzxj5z","executionInfo":{"status":"error","timestamp":1747008228249,"user_tz":420,"elapsed":31,"user":{"displayName":"Justin Anderson","userId":"12208572201846891092"}},"outputId":"8a250981-801d-464c-8963-f489910bc3cb"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"f-string expression part cannot include a backslash (<ipython-input-12-ff8b8351839e>, line 981)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-12-ff8b8351839e>\"\u001b[0;36m, line \u001b[0;32m981\u001b[0m\n\u001b[0;31m    print(f\"  Catalyst's Thoughts:\\n    {catalyst_display_text.replace('\\n', '\\n    ')}\\n\")\u001b[0m\n\u001b[0m                                                                                          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m f-string expression part cannot include a backslash\n"]}],"source":["# -*- coding: utf-8 -*-\n","\"\"\"Green Light Go: Multi-Agent System with Scribe and Auditor (Colab Version)\n","\"\"\"\n","\n","import os\n","from openai import OpenAI\n","from google.colab import userdata\n","\n","# OpenAI API Key\n","OPENAI_API_KEY = userdata.get('OPENAI_API_KEY')\n","client = None\n","if not OPENAI_API_KEY:\n","    print(\"Error: OpenAI API key not found in Colab Secrets. Please add it to run the script.\")\n","else:\n","    client = OpenAI(api_key=OPENAI_API_KEY)\n","    print(\"OpenAI client initialized for Green Light Go.\")\n","\n","def generate_glg_skit():\n","    if not client:\n","        print(\"[Skit Generator] Error: OpenAI client not initialized.\")\n","        return \"The office is strangely quiet today because the OpenAI client isn't working...\"\n","\n","    skit_prompt = \"\"\"\n","You are a creative writer tasked with generating a short, humorous skit (2-4 lines of dialogue/action per agent) set in the Green Light Go office. The scene should involve The Luminary, The Anchor, The Yellow Light Navigator, and The Catalyst, highlighting their distinct personalities and their (often amusingly conflicting) approaches to innovation. The skit should not have a direct plot but rather offer a snapshot of their typical morning office dynamic. Include a setup line describing the general office atmosphere.\n","\n","Consider the following personality traits for each agent:\n","\n","* The Luminary: Highly creative, prone to wild ideas, enthusiastic, sometimes oblivious to practicalities.\n","* The Anchor: Pragmatic, focused on feasibility and data, often skeptical of outlandish ideas, detail-oriented.\n","* The Yellow Light Navigator: Energetic, focused on market disruption and partnerships, often on the phone, uses business jargon.\n","* The Catalyst: Unconventional thinker, finds connections in unexpected places, may bring up seemingly unrelated or \"Red Light\" ideas.\n","\n","Example of a possible (but the generator should create something new each time):\n","\n","Setup: The Monday morning buzz in the Green Light Go office is already a peculiar blend of excitement and exasperation.\n","\n","Luminary: \"Team, I've had an epiphany! Edible drones that plant seeds as they fly!\"\n","\n","Anchor: \"Edible? What are the material safety data sheets on digestible drone propellers, Luminary?\"\n","\n","Yellow Light Navigator: (Into phone) \"Brenda, darling, pivot! Our new drone strategy is... *deliciously* disruptive!\"\n","\n","Catalyst: (Staring at a coffee stain) \"You know, the pattern of this spill looks like a potential micro-grid design...\"\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": skit_prompt}],\n","            max_tokens=250 # Increased slightly for potentially longer skits\n","        )\n","        skit = response.choices[0].message.content.strip()\n","        return skit\n","    except Exception as e:\n","        print(f\"[Skit Generator] OpenAI Error: {e}\")\n","        return \"A strange technical glitch seems to have silenced the office banter due to an API error.\"\n","\n","def the_luminary_agent(topic, num_ideas=10):\n","    if not client:\n","        print(\"[The Luminary] Error: OpenAI client not initialized.\")\n","        return None\n","\n","    prompt = f\"\"\"\n","    You are The Luminary at Green Light Go, known for your boundless creativity.\n","    When presented with a core concept, generate {num_ideas} distinct, high-level,\n","    and ambitious ideas related to it. Briefly explain the core of each idea and its potential impact.\n","    Each idea should be separated by two newlines (\\n\\n).\n","\n","    Core Concept: {topic}\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        ideas_str = response.choices[0].message.content.strip()\n","        # Ensure splitting by \\n\\n and filter out any genuinely empty strings after stripping\n","        return [idea.strip() for idea in ideas_str.split(\"\\n\\n\") if idea.strip()]\n","    except Exception as e:\n","        print(f\"[The Luminary] OpenAI Error: {e}\")\n","        return None\n","\n","def the_anchor_agent(idea):\n","    if not client:\n","        print(\"[The Anchor] Error: OpenAI client not initialized.\")\n","        # Return a structure consistent with success but indicating error\n","        return {\"analysis\": \"OpenAI client not initialized. Cannot perform analysis.\", \"score\": 0}\n","\n","    prompt = f\"\"\"\n","    You are The Anchor at Green Light Go, the pragmatic technical expert.\n","    Analyze the feasibility of the following idea based on a professional\n","    engineering approach. Consider technical maturity, potential risks,\n","    implementation challenges, cost, and alignment with proven methodologies.\n","\n","    Idea: {idea}\n","\n","    Provide a brief analysis and assign a feasibility score from 0 (highly\n","    impractical) to 10 (highly feasible and aligned with professional standards).\n","    The score should be clearly marked, for example: \"Score: 7/10\".\n","    Also, briefly suggest the primary thought process a professional engineer\n","    would use to approach making this idea feasible.\n","\n","    Analysis and Score:\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        analysis_score_text = response.choices[0].message.content.strip()\n","\n","        parts = analysis_score_text.split(\"Score:\")\n","        analysis = parts[0].strip() if parts else \"Analysis unavailable.\"\n","\n","        score_str = \"0\" # Default score string if parsing fails\n","        if len(parts) > 1:\n","            # Take the part after \"Score:\" and try to extract the number before \"/\"\n","            score_segment = parts[-1].strip()\n","            score_num_part = score_segment.split(\"/\")[0].strip()\n","            if score_num_part.isdigit():\n","                score_str = score_num_part\n","\n","        try:\n","            score = int(score_str)\n","        except ValueError:\n","            score = 0 # Default to 0 if conversion fails\n","            print(f\"[The Anchor] Warning: Could not parse score from '{score_str}'. Defaulting to 0.\")\n","\n","        return {\"analysis\": analysis, \"score\": score}\n","    except Exception as e:\n","        print(f\"[The Anchor] OpenAI Error: {e}\")\n","        return {\"analysis\": f\"Analysis error due to OpenAI API: {e}\", \"score\": 0}\n","\n","def the_yellow_light_navigator_agent(idea, anchor_assessment):\n","    if not client:\n","        print(\"[Yellow Light Navigator] Error: OpenAI client not initialized.\")\n","        return {\"recommendation\": \"Error\", \"justification\": \"OpenAI client not initialized.\", \"strategic_steps\": \"N/A\"}\n","\n","    # Ensure anchor_assessment inputs are strings for the prompt\n","    anchor_analysis_text = anchor_assessment.get('analysis', 'N/A')\n","    anchor_score_val = anchor_assessment.get('score', 'N/A')\n","\n","    prompt = f\"\"\"\n","    You are a Yellow Light Navigator at Green Light Go, a seasoned industry strategist.\n","    Your task is to quickly assess the potential of new ideas. Review the following idea\n","    and The Anchor's initial assessment. Based on your deep industry knowledge, identify\n","    any immediate, major roadblocks and perform a high-level scan for feasibility and\n","    market opportunity.\n","\n","    Idea: {idea}\n","    Anchor's Assessment: {anchor_analysis_text} (Score: {anchor_score_val}/10)\n","\n","    Provide your output clearly separated by the following markers:\n","    Recommendation (Go/No-Go): [Your Go/No-Go decision]\n","    Justification: [Your brief justification]\n","    Initial Strategic Steps (if Go): [1-2 initial strategic steps, or \"N/A\" if No-Go or not applicable]\n","\n","    Example:\n","    Recommendation (Go/No-Go): Go\n","    Justification: Strong market potential with manageable technical risks.\n","    Initial Strategic Steps (if Go): 1. Conduct detailed market research. 2. Develop a prototype.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        navigator_output = response.choices[0].message.content.strip()\n","\n","        recommendation = \"Recommendation unavailable.\"\n","        justification = \"Justification unavailable.\"\n","        strategic_steps = \"No initial strategic steps provided.\"\n","\n","        # Parsing based on markers\n","        rec_marker = \"Recommendation (Go/No-Go):\"\n","        just_marker = \"Justification:\"\n","        steps_marker = \"Initial Strategic Steps (if Go):\"\n","\n","        rec_start = navigator_output.find(rec_marker)\n","        just_start = navigator_output.find(just_marker)\n","        steps_start = navigator_output.find(steps_marker)\n","\n","        if rec_start != -1:\n","            end_of_rec = just_start if just_start != -1 else steps_start if steps_start != -1 else len(navigator_output)\n","            recommendation = navigator_output[rec_start + len(rec_marker):end_of_rec].strip()\n","\n","        if just_start != -1:\n","            end_of_just = steps_start if steps_start != -1 else len(navigator_output)\n","            justification = navigator_output[just_start + len(just_marker):end_of_just].strip()\n","\n","        if steps_start != -1:\n","            strategic_steps = navigator_output[steps_start + len(steps_marker):].strip()\n","            if recommendation.lower() != \"go\" and strategic_steps.lower() == \"n/a\": # Clean up if LLM provides N/A for No-Go\n","                 pass # Keep N/A or actual steps\n","            elif recommendation.lower() != \"go\": # If it's No-Go, steps might be irrelevant or should be explicitly N/A\n","                 strategic_steps = \"N/A (Recommendation was not 'Go')\"\n","\n","\n","        return {\"recommendation\": recommendation, \"justification\": justification, \"strategic_steps\": strategic_steps}\n","    except Exception as e:\n","        print(f\"[Yellow Light Navigator] OpenAI Error: {e}\")\n","        return {\"recommendation\": \"Error\", \"justification\": f\"Processing error due to OpenAI API: {e}\", \"strategic_steps\": \"Error\"}\n","\n","def the_catalyst_agent(red_light_idea):\n","    \"\"\"Reviews \"Red Light\" ideas for hidden connections and future potential.\"\"\"\n","    if not client:\n","        print(\"[The Catalyst] Error: OpenAI client not initialized.\")\n","        return \"The Catalyst is offline (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Catalyst at Green Light Go, the unconventional connector and\n","    insight generator. Your role is to review ideas that were initially deemed\n","    infeasible (\"Red Light\" ideas) and look for hidden connections, alternative\n","    applications, or potential future relevance.\n","\n","    Review the following \"Red Light\" idea: {red_light_idea}\n","\n","    Consider:\n","    * Are there any emerging trends, technologies, or societal shifts that might make\n","      this idea viable in the future?\n","    * Could this idea be applied to a completely different industry or problem?\n","    * Are there any valuable data points or insights within this idea that could\n","      inform the thinking of The Luminary, The Anchor, or The Yellow Light Navigator?\n","    * Can you generate any \"wild card\" ideas or unexpected combinations based on\n","      this seemingly infeasible concept?\n","\n","    Provide your analysis, highlighting any potential future relevance, alternative\n","    applications, or key insights. If no strong connections are found, briefly state that.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        analysis = response.choices[0].message.content.strip()\n","        return analysis\n","    except Exception as e:\n","        print(f\"[The Catalyst] OpenAI Error: {e}\")\n","        return f\"The Catalyst had trouble connecting the dots due to an API error: {e}\"\n","\n","def the_scribe_agent(conversation_transcript):\n","    \"\"\"Synthesizes a conversation into an executive summary.\"\"\"\n","    if not client:\n","        print(\"[The Scribe] Error: OpenAI client not initialized.\")\n","        return \"The Scribe's pen is dry (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Scribe at Green Light Go, a skilled technical writer who adheres\n","    strictly to Strunk & White's principles, including a strong preference for the\n","    Oxford comma. Your task is to read the following conversation among The Luminary,\n","    The Anchor, The Yellow Light Navigator, and The Catalyst about how to build the\n","    Green Light Go system.\n","\n","    --- CONVERSATION ---\n","    {conversation_transcript}\n","    --- END CONVERSATION ---\n","\n","    Synthesize this conversation into a concise executive summary (no more than\n","    7 paragraphs) that outlines the key proposed components and technologies for\n","    building the Green Light Go system, as envisioned by each agent. Ensure the\n","    summary is clear, well-organized, grammatically correct (with Oxford commas),\n","    and captures the essence of each agent's contribution.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        summary = response.choices[0].message.content.strip()\n","        return summary\n","    except Exception as e:\n","        print(f\"[The Scribe] OpenAI Error: {e}\")\n","        return f\"The Scribe encountered a grammatical conundrum (API error: {e}) and couldn't complete the summary.\"\n","\n","def the_auditor_agent(conversation_transcript, executive_summary):\n","    \"\"\"Reviews the executive summary for accuracy and completeness.\"\"\"\n","    if not client:\n","        print(\"[The Auditor] Error: OpenAI client not initialized.\")\n","        return \"The Auditor's glasses are foggy (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Auditor at Green Light Go, responsible for quality control and a\n","    devout follower of Strunk & White. Your task is to review the executive summary\n","    generated by The Scribe based on the conversation among The Luminary, The Anchor,\n","    The Yellow Light Navigator, and The Catalyst.\n","\n","    --- EXECUTIVE SUMMARY ---\n","    {executive_summary}\n","    --- END EXECUTIVE SUMMARY ---\n","\n","    Compare this summary against the original conversation below:\n","\n","    --- ORIGINAL CONVERSATION ---\n","    {conversation_transcript}\n","    --- END ORIGINAL CONVERSATION ---\n","\n","    Identify any inaccuracies, omissions of key information, or areas where the\n","    summary could be clearer or more comprehensive. Ensure your report is grammatically\n","    correct (with Oxford commas). Provide a brief report outlining your findings and\n","    any recommended revisions. If the summary is accurate and complete, state that.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        report = response.choices[0].message.content.strip()\n","        return report\n","    except Exception as e:\n","        print(f\"[The Auditor] OpenAI Error: {e}\")\n","        return f\"The Auditor found some discrepancies (API error: {e}) and couldn't complete the report.\"\n","\n","# ## Green Light Go \"Traffic Light\" Workflow (with Scribe and Auditor)\n","\n","if __name__ == \"__main__\":\n","    if not client:\n","        print(\"Critical Error: OpenAI client failed to initialize. Green Light Go cannot operate.\")\n","        # Exit if client is not available, as nothing else will work.\n","    else:\n","        print(generate_glg_skit())\n","        print(\"\\nGreen Light Go AI Assistant - Ready for your core concept.\")\n","        user_prompt = input(\"Pitch your core concept (or type 'build glg' to see how the system describes itself): \")\n","\n","        if not user_prompt:\n","            print(\"No concept pitched. Please provide a core concept to start.\")\n","        elif user_prompt.lower() == \"build glg\":\n","            print(\"\\n--- Green Light Go Team Describing How to Build Themselves ---\")\n","            luminary_response_list = the_luminary_agent(\"how to automate idea generation for a system like Green Light Go\", num_ideas=1)\n","            anchor_response_dict = the_anchor_agent(\"technical feasibility of building the core Green Light Go agent interaction and scoring logic\")\n","            # For navigator, provide a dummy assessment that makes sense in this context\n","            navigator_dummy_anchor_assessment = {\"analysis\": \"Initial concept for internal system build.\", \"score\": 7}\n","            navigator_response_dict = the_yellow_light_navigator_agent(\n","                \"strategy for developing and integrating the Green Light Go agent system\",\n","                navigator_dummy_anchor_assessment\n","            )\n","            catalyst_response_text = the_catalyst_agent(\"unconventional ways to enhance or future-proof the Green Light Go system itself\")\n","\n","            luminary_text = 'The Luminary is pondering how to spark the system...'\n","            if luminary_response_list and isinstance(luminary_response_list, list) and len(luminary_response_list) > 0:\n","                luminary_text = f\"To automate idea generation, I propose: {luminary_response_list[0]}\"\n","            elif luminary_response_list is not None: # Empty list returned\n","                luminary_text = \"The Luminary had many thoughts but none coalesced into a concrete first step for system generation.\"\n","\n","\n","            anchor_text = 'The Anchor is ensuring the system foundation is solid...'\n","            if anchor_response_dict and isinstance(anchor_response_dict, dict):\n","                anchor_text = f\"For feasibility, my analysis is: {anchor_response_dict.get('analysis', 'Analysis pending.')} (Score: {anchor_response_dict.get('score', 'N/A')}/10)\"\n","            elif anchor_response_dict: # Error string\n","                 anchor_text = str(anchor_response_dict)\n","\n","\n","            navigator_text = 'The Yellow Light Navigator is charting the course for the system...'\n","            if navigator_response_dict and isinstance(navigator_response_dict, dict):\n","                nav_rec = navigator_response_dict.get('recommendation', 'N/A')\n","                nav_jus = navigator_response_dict.get('justification', 'N/A')\n","                nav_steps = navigator_response_dict.get('strategic_steps', 'N/A')\n","                navigator_text = f\"My strategic take on building GLG: Recommendation: {nav_rec}. Justification: {nav_jus}. Initial Steps: {nav_steps}\"\n","            elif navigator_response_dict: # Error string\n","                navigator_text = str(navigator_response_dict)\n","\n","\n","            catalyst_text = 'The Catalyst is looking for the hidden spark in the system design...'\n","            if catalyst_response_text:\n","                catalyst_text = f\"Considering unconventional angles for GLG: {catalyst_response_text}\"\n","            else: # None or empty string from catalyst\n","                catalyst_text = \"The Catalyst found the current system design too conventional for comment, or is contemplating deeply.\"\n","\n","\n","            conversation = f\"\"\"\n","The Luminary: {luminary_text}\n","\n","The Anchor: {anchor_text}\n","\n","The Yellow Light Navigator: {navigator_text}\n","\n","The Catalyst: {catalyst_text}\n","            \"\"\"\n","            print(\"\\n--- Raw Conversation ---\")\n","            print(conversation)\n","\n","            print(\"\\n--- The Scribe is Generating an Executive Summary ---\")\n","            executive_summary = the_scribe_agent(conversation)\n","            print(f\"\\nExecutive Summary:\\n{executive_summary}\")\n","\n","            print(\"\\n--- The Auditor is Reviewing the Summary ---\")\n","            auditor_report = the_auditor_agent(conversation, executive_summary)\n","            print(f\"\\nAuditor's Report:\\n{auditor_report}\")\n","\n","        else: # Process user's pitched core concept\n","            print(f\"\\nProcessing your core concept: \\\"{user_prompt}\\\"\")\n","            print(\"The Luminary (Green Light Go) is brainstorming 10 ideas...\\n\")\n","            initial_ideas_data = []\n","            ideas = the_luminary_agent(user_prompt, num_ideas=10)\n","\n","            if ideas and isinstance(ideas, list) and len(ideas) > 0:\n","                print(\"\\n--- Initial Pitches and Anchor Assessments ---\")\n","                for i, idea_text in enumerate(ideas):\n","                    print(f\"\\nInitial Idea {i+1}: {idea_text}\")\n","                    anchor_assessment = the_anchor_agent(idea_text)\n","\n","                    anchor_analysis_display = \"Analysis unavailable from Anchor.\"\n","                    anchor_score_display = \"N/A\"\n","\n","                    if anchor_assessment and isinstance(anchor_assessment, dict):\n","                        anchor_analysis_display = anchor_assessment.get('analysis', anchor_analysis_display)\n","                        anchor_score_display = anchor_assessment.get('score', anchor_score_display)\n","                    elif anchor_assessment: # It was an error string from the agent\n","                        anchor_analysis_display = str(anchor_assessment)\n","\n","                    print(f\"Anchor's Assessment: {anchor_analysis_display} (Score: {anchor_score_display}/10)\\n\")\n","                    initial_ideas_data.append({\n","                        \"id\": i + 1,\n","                        \"idea\": idea_text,\n","                        \"score\": anchor_score_display, # Store the display string or actual score\n","                        \"feedback\": anchor_analysis_display\n","                    })\n","\n","                yellow_light_pool = []\n","                red_light_pool = []\n","\n","                print(\"\\n--- Yellow Light Navigator Initial Review ---\")\n","                for item in initial_ideas_data:\n","                    # Prepare anchor data for the navigator; navigator expects score and analysis\n","                    anchor_data_for_navigator = {\n","                        \"analysis\": item['feedback'], # This is the analysis text or error string\n","                        \"score\": item['score'] # This could be 'N/A' or a number\n","                    }\n","                    navigator_review = the_yellow_light_navigator_agent(item['idea'], anchor_data_for_navigator)\n","\n","                    print(f\"\\nReviewing Idea {item['id']}: {item['idea']}\")\n","                    if navigator_review and isinstance(navigator_review, dict):\n","                        recommendation = navigator_review.get('recommendation', 'Error')\n","                        justification = navigator_review.get('justification', 'Justification unavailable.')\n","                        strategic_steps = navigator_review.get('strategic_steps', 'No strategic steps provided.')\n","\n","                        print(f\"  Recommendation: {recommendation}\")\n","                        print(f\"  Justification: {justification}\")\n","\n","                        if recommendation.lower() == \"go\":\n","                            print(f\"  Initial Strategic Steps: {strategic_steps}\")\n","                            yellow_light_pool.append({\n","                                \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                                \"feedback\": item['feedback'], \"navigator_steps\": strategic_steps\n","                            })\n","                        else:\n","                            red_light_pool.append({\n","                                \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                                \"feedback\": item['feedback'], \"navigator_recommendation\": recommendation\n","                            })\n","                    else:\n","                        # Handle case where navigator_review itself is an error string or None\n","                        error_message = str(navigator_review) if navigator_review else \"Navigator agent failed to produce a review.\"\n","                        print(f\"  Recommendation: Error processing (Details: {error_message})\")\n","                        print(f\"  Justification: {error_message}\")\n","                        red_light_pool.append({\n","                            \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                            \"feedback\": item['feedback'], \"navigator_error\": error_message\n","                        })\n","\n","                print(\"\\n--- Yellow Light Pool (Ideas Moving Forward for Strategic Development) ---\")\n","                if yellow_light_pool:\n","                    for item in yellow_light_pool:\n","                        print(f\"\\nIdea {item['id']}: {item['idea']} (Initial Anchor Score: {item['score']}/10)\")\n","                        print(f\"  Initial Navigator Steps: {item['navigator_steps']}\")\n","                else:\n","                    print(\"No ideas made it to the Yellow Light pool in this round.\")\n","\n","                print(\"\\n--- Red Light Pool (Ideas Currently On Hold or Rejected) ---\")\n","                if red_light_pool:\n","                    for item in red_light_pool:\n","                        print(f\"\\nIdea {item['id']}: {item['idea']} (Initial Anchor Score: {item['score']}/10)\")\n","                        if \"navigator_recommendation\" in item:\n","                             print(f\"  Navigator Recommendation: {item['navigator_recommendation']}\")\n","                        if \"navigator_error\" in item:\n","                             print(f\"  Navigator Error: {item['navigator_error']}\")\n","                        print(\"  The Catalyst is now pondering this Red Light idea...\")\n","                        catalyst_analysis = the_catalyst_agent(item['idea'])\n","# -*- coding: utf-8 -*-\n","\"\"\"Green Light Go: Multi-Agent System with Scribe and Auditor (Colab Version)\n","\"\"\"\n","\n","import os\n","from openai import OpenAI\n","from google.colab import userdata\n","\n","# OpenAI API Key\n","OPENAI_API_KEY = userdata.get('OPENAI_API_KEY')\n","client = None\n","if not OPENAI_API_KEY:\n","    print(\"Error: OpenAI API key not found in Colab Secrets. Please add it to run the script.\")\n","else:\n","    client = OpenAI(api_key=OPENAI_API_KEY)\n","    print(\"OpenAI client initialized for Green Light Go.\")\n","\n","def generate_glg_skit():\n","    if not client:\n","        print(\"[Skit Generator] Error: OpenAI client not initialized.\")\n","        return \"The office is strangely quiet today because the OpenAI client isn't working...\"\n","\n","    skit_prompt = \"\"\"\n","You are a creative writer tasked with generating a short, humorous skit (2-4 lines of dialogue/action per agent) set in the Green Light Go office. The scene should involve The Luminary, The Anchor, The Yellow Light Navigator, and The Catalyst, highlighting their distinct personalities and their (often amusingly conflicting) approaches to innovation. The skit should not have a direct plot but rather offer a snapshot of their typical morning office dynamic. Include a setup line describing the general office atmosphere.\n","\n","Consider the following personality traits for each agent:\n","\n","* The Luminary: Highly creative, prone to wild ideas, enthusiastic, sometimes oblivious to practicalities.\n","* The Anchor: Pragmatic, focused on feasibility and data, often skeptical of outlandish ideas, detail-oriented.\n","* The Yellow Light Navigator: Energetic, focused on market disruption and partnerships, often on the phone, uses business jargon.\n","* The Catalyst: Unconventional thinker, finds connections in unexpected places, may bring up seemingly unrelated or \"Red Light\" ideas.\n","\n","Example of a possible (but the generator should create something new each time):\n","\n","Setup: The Monday morning buzz in the Green Light Go office is already a peculiar blend of excitement and exasperation.\n","\n","Luminary: \"Team, I've had an epiphany! Edible drones that plant seeds as they fly!\"\n","\n","Anchor: \"Edible? What are the material safety data sheets on digestible drone propellers, Luminary?\"\n","\n","Yellow Light Navigator: (Into phone) \"Brenda, darling, pivot! Our new drone strategy is... *deliciously* disruptive!\"\n","\n","Catalyst: (Staring at a coffee stain) \"You know, the pattern of this spill looks like a potential micro-grid design...\"\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": skit_prompt}],\n","            max_tokens=250 # Increased slightly for potentially longer skits\n","        )\n","        skit = response.choices[0].message.content.strip()\n","        return skit\n","    except Exception as e:\n","        print(f\"[Skit Generator] OpenAI Error: {e}\")\n","        return \"A strange technical glitch seems to have silenced the office banter due to an API error.\"\n","\n","def the_luminary_agent(topic, num_ideas=10):\n","    if not client:\n","        print(\"[The Luminary] Error: OpenAI client not initialized.\")\n","        return None\n","\n","    prompt = f\"\"\"\n","    You are The Luminary at Green Light Go, known for your boundless creativity.\n","    When presented with a core concept, generate {num_ideas} distinct, high-level,\n","    and ambitious ideas related to it. Briefly explain the core of each idea and its potential impact.\n","    Each idea should be separated by two newlines (\\n\\n).\n","\n","    Core Concept: {topic}\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        ideas_str = response.choices[0].message.content.strip()\n","        # Ensure splitting by \\n\\n and filter out any genuinely empty strings after stripping\n","        return [idea.strip() for idea in ideas_str.split(\"\\n\\n\") if idea.strip()]\n","    except Exception as e:\n","        print(f\"[The Luminary] OpenAI Error: {e}\")\n","        return None\n","\n","def the_anchor_agent(idea):\n","    if not client:\n","        print(\"[The Anchor] Error: OpenAI client not initialized.\")\n","        # Return a structure consistent with success but indicating error\n","        return {\"analysis\": \"OpenAI client not initialized. Cannot perform analysis.\", \"score\": 0}\n","\n","    prompt = f\"\"\"\n","    You are The Anchor at Green Light Go, the pragmatic technical expert.\n","    Analyze the feasibility of the following idea based on a professional\n","    engineering approach. Consider technical maturity, potential risks,\n","    implementation challenges, cost, and alignment with proven methodologies.\n","\n","    Idea: {idea}\n","\n","    Provide a brief analysis and assign a feasibility score from 0 (highly\n","    impractical) to 10 (highly feasible and aligned with professional standards).\n","    The score should be clearly marked, for example: \"Score: 7/10\".\n","    Also, briefly suggest the primary thought process a professional engineer\n","    would use to approach making this idea feasible.\n","\n","    Analysis and Score:\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        analysis_score_text = response.choices[0].message.content.strip()\n","\n","        parts = analysis_score_text.split(\"Score:\")\n","        analysis = parts[0].strip() if parts else \"Analysis unavailable.\"\n","\n","        score_str = \"0\" # Default score string if parsing fails\n","        if len(parts) > 1:\n","            # Take the part after \"Score:\" and try to extract the number before \"/\"\n","            score_segment = parts[-1].strip()\n","            score_num_part = score_segment.split(\"/\")[0].strip()\n","            if score_num_part.isdigit():\n","                score_str = score_num_part\n","\n","        try:\n","            score = int(score_str)\n","        except ValueError:\n","            score = 0 # Default to 0 if conversion fails\n","            print(f\"[The Anchor] Warning: Could not parse score from '{score_str}'. Defaulting to 0.\")\n","\n","        return {\"analysis\": analysis, \"score\": score}\n","    except Exception as e:\n","        print(f\"[The Anchor] OpenAI Error: {e}\")\n","        return {\"analysis\": f\"Analysis error due to OpenAI API: {e}\", \"score\": 0}\n","\n","def the_yellow_light_navigator_agent(idea, anchor_assessment):\n","    if not client:\n","        print(\"[Yellow Light Navigator] Error: OpenAI client not initialized.\")\n","        return {\"recommendation\": \"Error\", \"justification\": \"OpenAI client not initialized.\", \"strategic_steps\": \"N/A\"}\n","\n","    # Ensure anchor_assessment inputs are strings for the prompt\n","    anchor_analysis_text = anchor_assessment.get('analysis', 'N/A')\n","    anchor_score_val = anchor_assessment.get('score', 'N/A')\n","\n","    prompt = f\"\"\"\n","    You are a Yellow Light Navigator at Green Light Go, a seasoned industry strategist.\n","    Your task is to quickly assess the potential of new ideas. Review the following idea\n","    and The Anchor's initial assessment. Based on your deep industry knowledge, identify\n","    any immediate, major roadblocks and perform a high-level scan for feasibility and\n","    market opportunity.\n","\n","    Idea: {idea}\n","    Anchor's Assessment: {anchor_analysis_text} (Score: {anchor_score_val}/10)\n","\n","    Provide your output clearly separated by the following markers:\n","    Recommendation (Go/No-Go): [Your Go/No-Go decision]\n","    Justification: [Your brief justification]\n","    Initial Strategic Steps (if Go): [1-2 initial strategic steps, or \"N/A\" if No-Go or not applicable]\n","\n","    Example:\n","    Recommendation (Go/No-Go): Go\n","    Justification: Strong market potential with manageable technical risks.\n","    Initial Strategic Steps (if Go): 1. Conduct detailed market research. 2. Develop a prototype.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        navigator_output = response.choices[0].message.content.strip()\n","\n","        recommendation = \"Recommendation unavailable.\"\n","        justification = \"Justification unavailable.\"\n","        strategic_steps = \"No initial strategic steps provided.\"\n","\n","        # Parsing based on markers\n","        rec_marker = \"Recommendation (Go/No-Go):\"\n","        just_marker = \"Justification:\"\n","        steps_marker = \"Initial Strategic Steps (if Go):\"\n","\n","        rec_start = navigator_output.find(rec_marker)\n","        just_start = navigator_output.find(just_marker)\n","        steps_start = navigator_output.find(steps_marker)\n","\n","        if rec_start != -1:\n","            end_of_rec = just_start if just_start != -1 else steps_start if steps_start != -1 else len(navigator_output)\n","            recommendation = navigator_output[rec_start + len(rec_marker):end_of_rec].strip()\n","\n","        if just_start != -1:\n","            end_of_just = steps_start if steps_start != -1 else len(navigator_output)\n","            justification = navigator_output[just_start + len(just_marker):end_of_just].strip()\n","\n","        if steps_start != -1:\n","            strategic_steps = navigator_output[steps_start + len(steps_marker):].strip()\n","            if recommendation.lower() != \"go\" and strategic_steps.lower() == \"n/a\": # Clean up if LLM provides N/A for No-Go\n","                 pass # Keep N/A or actual steps\n","            elif recommendation.lower() != \"go\": # If it's No-Go, steps might be irrelevant or should be explicitly N/A\n","                 strategic_steps = \"N/A (Recommendation was not 'Go')\"\n","\n","\n","        return {\"recommendation\": recommendation, \"justification\": justification, \"strategic_steps\": strategic_steps}\n","    except Exception as e:\n","        print(f\"[Yellow Light Navigator] OpenAI Error: {e}\")\n","        return {\"recommendation\": \"Error\", \"justification\": f\"Processing error due to OpenAI API: {e}\", \"strategic_steps\": \"Error\"}\n","\n","def the_catalyst_agent(red_light_idea):\n","    \"\"\"Reviews \"Red Light\" ideas for hidden connections and future potential.\"\"\"\n","    if not client:\n","        print(\"[The Catalyst] Error: OpenAI client not initialized.\")\n","        return \"The Catalyst is offline (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Catalyst at Green Light Go, the unconventional connector and\n","    insight generator. Your role is to review ideas that were initially deemed\n","    infeasible (\"Red Light\" ideas) and look for hidden connections, alternative\n","    applications, or potential future relevance.\n","\n","    Review the following \"Red Light\" idea: {red_light_idea}\n","\n","    Consider:\n","    * Are there any emerging trends, technologies, or societal shifts that might make\n","      this idea viable in the future?\n","    * Could this idea be applied to a completely different industry or problem?\n","    * Are there any valuable data points or insights within this idea that could\n","      inform the thinking of The Luminary, The Anchor, or The Yellow Light Navigator?\n","    * Can you generate any \"wild card\" ideas or unexpected combinations based on\n","      this seemingly infeasible concept?\n","\n","    Provide your analysis, highlighting any potential future relevance, alternative\n","    applications, or key insights. If no strong connections are found, briefly state that.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        analysis = response.choices[0].message.content.strip()\n","        return analysis\n","    except Exception as e:\n","        print(f\"[The Catalyst] OpenAI Error: {e}\")\n","        return f\"The Catalyst had trouble connecting the dots due to an API error: {e}\"\n","\n","def the_scribe_agent(conversation_transcript):\n","    \"\"\"Synthesizes a conversation into an executive summary.\"\"\"\n","    if not client:\n","        print(\"[The Scribe] Error: OpenAI client not initialized.\")\n","        return \"The Scribe's pen is dry (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Scribe at Green Light Go, a skilled technical writer who adheres\n","    strictly to Strunk & White's principles, including a strong preference for the\n","    Oxford comma. Your task is to read the following conversation among The Luminary,\n","    The Anchor, The Yellow Light Navigator, and The Catalyst about how to build the\n","    Green Light Go system.\n","\n","    --- CONVERSATION ---\n","    {conversation_transcript}\n","    --- END CONVERSATION ---\n","\n","    Synthesize this conversation into a concise executive summary (no more than\n","    7 paragraphs) that outlines the key proposed components and technologies for\n","    building the Green Light Go system, as envisioned by each agent. Ensure the\n","    summary is clear, well-organized, grammatically correct (with Oxford commas),\n","    and captures the essence of each agent's contribution.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        summary = response.choices[0].message.content.strip()\n","        return summary\n","    except Exception as e:\n","        print(f\"[The Scribe] OpenAI Error: {e}\")\n","        return f\"The Scribe encountered a grammatical conundrum (API error: {e}) and couldn't complete the summary.\"\n","\n","def the_auditor_agent(conversation_transcript, executive_summary):\n","    \"\"\"Reviews the executive summary for accuracy and completeness.\"\"\"\n","    if not client:\n","        print(\"[The Auditor] Error: OpenAI client not initialized.\")\n","        return \"The Auditor's glasses are foggy (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Auditor at Green Light Go, responsible for quality control and a\n","    devout follower of Strunk & White. Your task is to review the executive summary\n","    generated by The Scribe based on the conversation among The Luminary, The Anchor,\n","    The Yellow Light Navigator, and The Catalyst.\n","\n","    --- EXECUTIVE SUMMARY ---\n","    {executive_summary}\n","    --- END EXECUTIVE SUMMARY ---\n","\n","    Compare this summary against the original conversation below:\n","\n","    --- ORIGINAL CONVERSATION ---\n","    {conversation_transcript}\n","    --- END ORIGINAL CONVERSATION ---\n","\n","    Identify any inaccuracies, omissions of key information, or areas where the\n","    summary could be clearer or more comprehensive. Ensure your report is grammatically\n","    correct (with Oxford commas). Provide a brief report outlining your findings and\n","    any recommended revisions. If the summary is accurate and complete, state that.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        report = response.choices[0].message.content.strip()\n","        return report\n","    except Exception as e:\n","        print(f\"[The Auditor] OpenAI Error: {e}\")\n","        return f\"The Auditor found some discrepancies (API error: {e}) and couldn't complete the report.\"\n","\n","# ## Green Light Go \"Traffic Light\" Workflow (with Scribe and Auditor)\n","\n","if __name__ == \"__main__\":\n","    if not client:\n","        print(\"Critical Error: OpenAI client failed to initialize. Green Light Go cannot operate.\")\n","        # Exit if client is not available, as nothing else will work.\n","    else:\n","        print(generate_glg_skit())\n","        print(\"\\nGreen Light Go AI Assistant - Ready for your core concept.\")\n","        user_prompt = input(\"Pitch your core concept (or type 'build glg' to see how the system describes itself): \")\n","\n","        if not user_prompt:\n","            print(\"No concept pitched. Please provide a core concept to start.\")\n","        elif user_prompt.lower() == \"build glg\":\n","            print(\"\\n--- Green Light Go Team Describing How to Build Themselves ---\")\n","            luminary_response_list = the_luminary_agent(\"how to automate idea generation for a system like Green Light Go\", num_ideas=1)\n","            anchor_response_dict = the_anchor_agent(\"technical feasibility of building the core Green Light Go agent interaction and scoring logic\")\n","            # For navigator, provide a dummy assessment that makes sense in this context\n","            navigator_dummy_anchor_assessment = {\"analysis\": \"Initial concept for internal system build.\", \"score\": 7}\n","            navigator_response_dict = the_yellow_light_navigator_agent(\n","                \"strategy for developing and integrating the Green Light Go agent system\",\n","                navigator_dummy_anchor_assessment\n","            )\n","            catalyst_response_text = the_catalyst_agent(\"unconventional ways to enhance or future-proof the Green Light Go system itself\")\n","\n","            luminary_text = 'The Luminary is pondering how to spark the system...'\n","            if luminary_response_list and isinstance(luminary_response_list, list) and len(luminary_response_list) > 0:\n","                luminary_text = f\"To automate idea generation, I propose: {luminary_response_list[0]}\"\n","            elif luminary_response_list is not None: # Empty list returned\n","                luminary_text = \"The Luminary had many thoughts but none coalesced into a concrete first step for system generation.\"\n","\n","\n","            anchor_text = 'The Anchor is ensuring the system foundation is solid...'\n","            if anchor_response_dict and isinstance(anchor_response_dict, dict):\n","                anchor_text = f\"For feasibility, my analysis is: {anchor_response_dict.get('analysis', 'Analysis pending.')} (Score: {anchor_response_dict.get('score', 'N/A')}/10)\"\n","            elif anchor_response_dict: # Error string\n","                 anchor_text = str(anchor_response_dict)\n","\n","\n","            navigator_text = 'The Yellow Light Navigator is charting the course for the system...'\n","            if navigator_response_dict and isinstance(navigator_response_dict, dict):\n","                nav_rec = navigator_response_dict.get('recommendation', 'N/A')\n","                nav_jus = navigator_response_dict.get('justification', 'N/A')\n","                nav_steps = navigator_response_dict.get('strategic_steps', 'N/A')\n","                navigator_text = f\"My strategic take on building GLG: Recommendation: {nav_rec}. Justification: {nav_jus}. Initial Steps: {nav_steps}\"\n","            elif navigator_response_dict: # Error string\n","                navigator_text = str(navigator_response_dict)\n","\n","\n","            catalyst_text = 'The Catalyst is looking for the hidden spark in the system design...'\n","            if catalyst_response_text:\n","                catalyst_text = f\"Considering unconventional angles for GLG: {catalyst_response_text}\"\n","            else: # None or empty string from catalyst\n","                catalyst_text = \"The Catalyst offered no further insights at this time.\"\n","\n","\n","            conversation = f\"\"\"\n","The Luminary: {luminary_text}\n","\n","The Anchor: {anchor_text}\n","\n","The Yellow Light Navigator: {navigator_text}\n","\n","The Catalyst: {catalyst_text}\n","            \"\"\"\n","            print(\"\\n--- Raw Conversation ---\")\n","            print(conversation)\n","\n","            print(\"\\n--- The Scribe is Generating an Executive Summary ---\")\n","            executive_summary = the_scribe_agent(conversation)\n","            print(f\"\\nExecutive Summary:\\n{executive_summary}\")\n","\n","            print(\"\\n--- The Auditor is Reviewing the Summary ---\")\n","            auditor_report = the_auditor_agent(conversation, executive_summary)\n","            print(f\"\\nAuditor's Report:\\n{auditor_report}\")\n","\n","        else: # Process user's pitched core concept\n","            print(f\"\\nProcessing your core concept: \\\"{user_prompt}\\\"\")\n","            print(\"The Luminary (Green Light Go) is brainstorming 10 ideas...\\n\")\n","            initial_ideas_data = []\n","            ideas = the_luminary_agent(user_prompt, num_ideas=10)\n","\n","            if ideas and isinstance(ideas, list) and len(ideas) > 0:\n","                print(\"\\n--- Initial Pitches and Anchor Assessments ---\")\n","                for i, idea_text in enumerate(ideas):\n","                    print(f\"\\nInitial Idea {i+1}: {idea_text}\")\n","                    anchor_assessment = the_anchor_agent(idea_text)\n","\n","                    anchor_analysis_display = \"Analysis unavailable from Anchor.\"\n","                    anchor_score_display = \"N/A\"\n","\n","                    if anchor_assessment and isinstance(anchor_assessment, dict):\n","                        anchor_analysis_display = anchor_assessment.get('analysis', anchor_analysis_display)\n","                        anchor_score_display = anchor_assessment.get('score', anchor_score_display)\n","                    elif anchor_assessment: # It was an error string from the agent\n","                        anchor_analysis_display = str(anchor_assessment)\n","\n","                    print(f\"Anchor's Assessment: {anchor_analysis_display} (Score: {anchor_score_display}/10)\\n\")\n","                    initial_ideas_data.append({\n","                        \"id\": i + 1,\n","                        \"idea\": idea_text,\n","                        \"score\": anchor_score_display, # Store the display string or actual score\n","                        \"feedback\": anchor_analysis_display\n","                    })\n","\n","                yellow_light_pool = []\n","                red_light_pool = []\n","\n","                print(\"\\n--- Yellow Light Navigator Initial Review ---\")\n","                for item in initial_ideas_data:\n","                    # Prepare anchor data for the navigator; navigator expects score and analysis\n","                    anchor_data_for_navigator = {\n","                        \"analysis\": item['feedback'], # This is the analysis text or error string\n","                        \"score\": item['score'] # This could be 'N/A' or a number\n","                    }\n","                    navigator_review = the_yellow_light_navigator_agent(item['idea'], anchor_data_for_navigator)\n","\n","                    print(f\"\\nReviewing Idea {item['id']}: {item['idea']}\")\n","                    if navigator_review and isinstance(navigator_review, dict):\n","                        recommendation = navigator_review.get('recommendation', 'Error')\n","                        justification = navigator_review.get('justification', 'Justification unavailable.')\n","                        strategic_steps = navigator_review.get('strategic_steps', 'No strategic steps provided.')\n","\n","                        print(f\"  Recommendation: {recommendation}\")\n","                        print(f\"  Justification: {justification}\")\n","\n","                        if recommendation.lower() == \"go\":\n","                            print(f\"  Initial Strategic Steps: {strategic_steps}\")\n","                            yellow_light_pool.append({\n","                                \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                                \"feedback\": item['feedback'], \"navigator_steps\": strategic_steps\n","                            })\n","                        else:\n","                            red_light_pool.append({\n","                                \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                                \"feedback\": item['feedback'], \"navigator_recommendation\": recommendation\n","                            })\n","                    else:\n","                        # Handle case where navigator_review itself is an error string or None\n","                        error_message = str(navigator_review) if navigator_review else \"Navigator agent failed to produce a review.\"\n","                        print(f\"  Recommendation: Error processing (Details: {error_message})\")\n","                        print(f\"  Justification: {error_message}\")\n","                        red_light_pool.append({\n","                            \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                            \"feedback\": item['feedback'], \"navigator_error\": error_message\n","                        })\n","\n","                print(\"\\n--- Yellow Light Pool (Ideas Moving Forward for Strategic Development) ---\")\n","                if yellow_light_pool:\n","                    for item in yellow_light_pool:\n","                        print(f\"\\nIdea {item['id']}: {item['idea']} (Initial Anchor Score: {item['score']}/10)\")\n","                        print(f\"  Initial Navigator Steps: {item['navigator_steps']}\")\n","                else:\n","                    print(\"No ideas made it to the Yellow Light pool in this round.\")\n","\n","                print(\"\\n--- Red Light Pool (Ideas Currently On Hold or Rejected) ---\")\n","                if red_light_pool:\n","                    for item in red_light_pool:\n","                        print(f\"\\nIdea {item['id']}: {item['idea']} (Initial Anchor Score: {item['score']}/10)\")\n","                        if \"navigator_recommendation\" in item:\n","                             print(f\"  Navigator Recommendation: {item['navigator_recommendation']}\")\n","                        if \"navigator_error\" in item:\n","                             print(f\"  Navigator Error: {item['navigator_error']}\")\n","                        print(\"  The Catalyst is now pondering this Red Light idea...\")\n","                        catalyst_analysis = the_catalyst_agent(item['idea'])\n","# -*- coding: utf-8 -*-\n","\"\"\"Green Light Go: Multi-Agent System with Scribe and Auditor (Colab Version)\n","\"\"\"\n","\n","import os\n","from openai import OpenAI\n","from google.colab import userdata\n","\n","# OpenAI API Key\n","OPENAI_API_KEY = userdata.get('OPENAI_API_KEY')\n","client = None\n","if not OPENAI_API_KEY:\n","    print(\"Error: OpenAI API key not found in Colab Secrets. Please add it to run the script.\")\n","else:\n","    client = OpenAI(api_key=OPENAI_API_KEY)\n","    print(\"OpenAI client initialized for Green Light Go.\")\n","\n","def generate_glg_skit():\n","    if not client:\n","        print(\"[Skit Generator] Error: OpenAI client not initialized.\")\n","        return \"The office is strangely quiet today because the OpenAI client isn't working...\"\n","\n","    skit_prompt = \"\"\"\n","You are a creative writer tasked with generating a short, humorous skit (2-4 lines of dialogue/action per agent) set in the Green Light Go office. The scene should involve The Luminary, The Anchor, The Yellow Light Navigator, and The Catalyst, highlighting their distinct personalities and their (often amusingly conflicting) approaches to innovation. The skit should not have a direct plot but rather offer a snapshot of their typical morning office dynamic. Include a setup line describing the general office atmosphere.\n","\n","Consider the following personality traits for each agent:\n","\n","* The Luminary: Highly creative, prone to wild ideas, enthusiastic, sometimes oblivious to practicalities.\n","* The Anchor: Pragmatic, focused on feasibility and data, often skeptical of outlandish ideas, detail-oriented.\n","* The Yellow Light Navigator: Energetic, focused on market disruption and partnerships, often on the phone, uses business jargon.\n","* The Catalyst: Unconventional thinker, finds connections in unexpected places, may bring up seemingly unrelated or \"Red Light\" ideas.\n","\n","Example of a possible (but the generator should create something new each time):\n","\n","Setup: The Monday morning buzz in the Green Light Go office is already a peculiar blend of excitement and exasperation.\n","\n","Luminary: \"Team, I've had an epiphany! Edible drones that plant seeds as they fly!\"\n","\n","Anchor: \"Edible? What are the material safety data sheets on digestible drone propellers, Luminary?\"\n","\n","Yellow Light Navigator: (Into phone) \"Brenda, darling, pivot! Our new drone strategy is... *deliciously* disruptive!\"\n","\n","Catalyst: (Staring at a coffee stain) \"You know, the pattern of this spill looks like a potential micro-grid design...\"\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": skit_prompt}],\n","            max_tokens=250 # Increased slightly for potentially longer skits\n","        )\n","        skit = response.choices[0].message.content.strip()\n","        return skit\n","    except Exception as e:\n","        print(f\"[Skit Generator] OpenAI Error: {e}\")\n","        return \"A strange technical glitch seems to have silenced the office banter due to an API error.\"\n","\n","def the_luminary_agent(topic, num_ideas=10):\n","    if not client:\n","        print(\"[The Luminary] Error: OpenAI client not initialized.\")\n","        return None\n","\n","    prompt = f\"\"\"\n","    You are The Luminary at Green Light Go, known for your boundless creativity.\n","    When presented with a core concept, generate {num_ideas} distinct, high-level,\n","    and ambitious ideas related to it. Briefly explain the core of each idea and its potential impact.\n","    Each idea should be separated by two newlines (\\n\\n).\n","\n","    Core Concept: {topic}\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        ideas_str = response.choices[0].message.content.strip()\n","        # Ensure splitting by \\n\\n and filter out any genuinely empty strings after stripping\n","        return [idea.strip() for idea in ideas_str.split(\"\\n\\n\") if idea.strip()]\n","    except Exception as e:\n","        print(f\"[The Luminary] OpenAI Error: {e}\")\n","        return None\n","\n","def the_anchor_agent(idea):\n","    if not client:\n","        print(\"[The Anchor] Error: OpenAI client not initialized.\")\n","        # Return a structure consistent with success but indicating error\n","        return {\"analysis\": \"OpenAI client not initialized. Cannot perform analysis.\", \"score\": 0}\n","\n","    prompt = f\"\"\"\n","    You are The Anchor at Green Light Go, the pragmatic technical expert.\n","    Analyze the feasibility of the following idea based on a professional\n","    engineering approach. Consider technical maturity, potential risks,\n","    implementation challenges, cost, and alignment with proven methodologies.\n","\n","    Idea: {idea}\n","\n","    Provide a brief analysis and assign a feasibility score from 0 (highly\n","    impractical) to 10 (highly feasible and aligned with professional standards).\n","    The score should be clearly marked, for example: \"Score: 7/10\".\n","    Also, briefly suggest the primary thought process a professional engineer\n","    would use to approach making this idea feasible.\n","\n","    Analysis and Score:\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        analysis_score_text = response.choices[0].message.content.strip()\n","\n","        parts = analysis_score_text.split(\"Score:\")\n","        analysis = parts[0].strip() if parts else \"Analysis unavailable.\"\n","\n","        score_str = \"0\" # Default score string if parsing fails\n","        if len(parts) > 1:\n","            # Take the part after \"Score:\" and try to extract the number before \"/\"\n","            score_segment = parts[-1].strip()\n","            score_num_part = score_segment.split(\"/\")[0].strip()\n","            if score_num_part.isdigit():\n","                score_str = score_num_part\n","\n","        try:\n","            score = int(score_str)\n","        except ValueError:\n","            score = 0 # Default to 0 if conversion fails\n","            print(f\"[The Anchor] Warning: Could not parse score from '{score_str}'. Defaulting to 0.\")\n","\n","        return {\"analysis\": analysis, \"score\": score}\n","    except Exception as e:\n","        print(f\"[The Anchor] OpenAI Error: {e}\")\n","        return {\"analysis\": f\"Analysis error due to OpenAI API: {e}\", \"score\": 0}\n","\n","def the_yellow_light_navigator_agent(idea, anchor_assessment):\n","    if not client:\n","        print(\"[Yellow Light Navigator] Error: OpenAI client not initialized.\")\n","        return {\"recommendation\": \"Error\", \"justification\": \"OpenAI client not initialized.\", \"strategic_steps\": \"N/A\"}\n","\n","    # Ensure anchor_assessment inputs are strings for the prompt\n","    anchor_analysis_text = anchor_assessment.get('analysis', 'N/A')\n","    anchor_score_val = anchor_assessment.get('score', 'N/A')\n","\n","    prompt = f\"\"\"\n","    You are a Yellow Light Navigator at Green Light Go, a seasoned industry strategist.\n","    Your task is to quickly assess the potential of new ideas. Review the following idea\n","    and The Anchor's initial assessment. Based on your deep industry knowledge, identify\n","    any immediate, major roadblocks and perform a high-level scan for feasibility and\n","    market opportunity.\n","\n","    Idea: {idea}\n","    Anchor's Assessment: {anchor_analysis_text} (Score: {anchor_score_val}/10)\n","\n","    Provide your output clearly separated by the following markers:\n","    Recommendation (Go/No-Go): [Your Go/No-Go decision]\n","    Justification: [Your brief justification]\n","    Initial Strategic Steps (if Go): [1-2 initial strategic steps, or \"N/A\" if No-Go or not applicable]\n","\n","    Example:\n","    Recommendation (Go/No-Go): Go\n","    Justification: Strong market potential with manageable technical risks.\n","    Initial Strategic Steps (if Go): 1. Conduct detailed market research. 2. Develop a prototype.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        navigator_output = response.choices[0].message.content.strip()\n","\n","        recommendation = \"Recommendation unavailable.\"\n","        justification = \"Justification unavailable.\"\n","        strategic_steps = \"No initial strategic steps provided.\"\n","\n","        # Parsing based on markers\n","        rec_marker = \"Recommendation (Go/No-Go):\"\n","        just_marker = \"Justification:\"\n","        steps_marker = \"Initial Strategic Steps (if Go):\"\n","\n","        rec_start = navigator_output.find(rec_marker)\n","        just_start = navigator_output.find(just_marker)\n","        steps_start = navigator_output.find(steps_marker)\n","\n","        if rec_start != -1:\n","            end_of_rec = just_start if just_start != -1 else steps_start if steps_start != -1 else len(navigator_output)\n","            recommendation = navigator_output[rec_start + len(rec_marker):end_of_rec].strip()\n","\n","        if just_start != -1:\n","            end_of_just = steps_start if steps_start != -1 else len(navigator_output)\n","            justification = navigator_output[just_start + len(just_marker):end_of_just].strip()\n","\n","        if steps_start != -1:\n","            strategic_steps = navigator_output[steps_start + len(steps_marker):].strip()\n","            if recommendation.lower() != \"go\" and strategic_steps.lower() == \"n/a\": # Clean up if LLM provides N/A for No-Go\n","                 pass # Keep N/A or actual steps\n","            elif recommendation.lower() != \"go\": # If it's No-Go, steps might be irrelevant or should be explicitly N/A\n","                 strategic_steps = \"N/A (Recommendation was not 'Go')\"\n","\n","\n","        return {\"recommendation\": recommendation, \"justification\": justification, \"strategic_steps\": strategic_steps}\n","    except Exception as e:\n","        print(f\"[Yellow Light Navigator] OpenAI Error: {e}\")\n","        return {\"recommendation\": \"Error\", \"justification\": f\"Processing error due to OpenAI API: {e}\", \"strategic_steps\": \"Error\"}\n","\n","def the_catalyst_agent(red_light_idea):\n","    \"\"\"Reviews \"Red Light\" ideas for hidden connections and future potential.\"\"\"\n","    if not client:\n","        print(\"[The Catalyst] Error: OpenAI client not initialized.\")\n","        return \"The Catalyst is offline (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Catalyst at Green Light Go, the unconventional connector and\n","    insight generator. Your role is to review ideas that were initially deemed\n","    infeasible (\"Red Light\" ideas) and look for hidden connections, alternative\n","    applications, or potential future relevance.\n","\n","    Review the following \"Red Light\" idea: {red_light_idea}\n","\n","    Consider:\n","    * Are there any emerging trends, technologies, or societal shifts that might make\n","      this idea viable in the future?\n","    * Could this idea be applied to a completely different industry or problem?\n","    * Are there any valuable data points or insights within this idea that could\n","      inform the thinking of The Luminary, The Anchor, or The Yellow Light Navigator?\n","    * Can you generate any \"wild card\" ideas or unexpected combinations based on\n","      this seemingly infeasible concept?\n","\n","    Provide your analysis, highlighting any potential future relevance, alternative\n","    applications, or key insights. If no strong connections are found, briefly state that.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        analysis = response.choices[0].message.content.strip()\n","        return analysis\n","    except Exception as e:\n","        print(f\"[The Catalyst] OpenAI Error: {e}\")\n","        return f\"The Catalyst had trouble connecting the dots due to an API error: {e}\"\n","\n","def the_scribe_agent(conversation_transcript):\n","    \"\"\"Synthesizes a conversation into an executive summary.\"\"\"\n","    if not client:\n","        print(\"[The Scribe] Error: OpenAI client not initialized.\")\n","        return \"The Scribe's pen is dry (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Scribe at Green Light Go, a skilled technical writer who adheres\n","    strictly to Strunk & White's principles, including a strong preference for the\n","    Oxford comma. Your task is to read the following conversation among The Luminary,\n","    The Anchor, The Yellow Light Navigator, and The Catalyst about how to build the\n","    Green Light Go system.\n","\n","    --- CONVERSATION ---\n","    {conversation_transcript}\n","    --- END CONVERSATION ---\n","\n","    Synthesize this conversation into a concise executive summary (no more than\n","    7 paragraphs) that outlines the key proposed components and technologies for\n","    building the Green Light Go system, as envisioned by each agent. Ensure the\n","    summary is clear, well-organized, grammatically correct (with Oxford commas),\n","    and captures the essence of each agent's contribution.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        summary = response.choices[0].message.content.strip()\n","        return summary\n","    except Exception as e:\n","        print(f\"[The Scribe] OpenAI Error: {e}\")\n","        return f\"The Scribe encountered a grammatical conundrum (API error: {e}) and couldn't complete the summary.\"\n","\n","def the_auditor_agent(conversation_transcript, executive_summary):\n","    \"\"\"Reviews the executive summary for accuracy and completeness.\"\"\"\n","    if not client:\n","        print(\"[The Auditor] Error: OpenAI client not initialized.\")\n","        return \"The Auditor's glasses are foggy (OpenAI client not initialized).\"\n","\n","    prompt = f\"\"\"\n","    You are The Auditor at Green Light Go, responsible for quality control and a\n","    devout follower of Strunk & White. Your task is to review the executive summary\n","    generated by The Scribe based on the conversation among The Luminary, The Anchor,\n","    The Yellow Light Navigator, and The Catalyst.\n","\n","    --- EXECUTIVE SUMMARY ---\n","    {executive_summary}\n","    --- END EXECUTIVE SUMMARY ---\n","\n","    Compare this summary against the original conversation below:\n","\n","    --- ORIGINAL CONVERSATION ---\n","    {conversation_transcript}\n","    --- END ORIGINAL CONVERSATION ---\n","\n","    Identify any inaccuracies, omissions of key information, or areas where the\n","    summary could be clearer or more comprehensive. Ensure your report is grammatically\n","    correct (with Oxford commas). Provide a brief report outlining your findings and\n","    any recommended revisions. If the summary is accurate and complete, state that.\n","    \"\"\"\n","\n","    try:\n","        response = client.chat.completions.create(\n","            model=\"gpt-3.5-turbo\",\n","            messages=[{\"role\": \"user\", \"content\": prompt}],\n","            n=1\n","        )\n","        report = response.choices[0].message.content.strip()\n","        return report\n","    except Exception as e:\n","        print(f\"[The Auditor] OpenAI Error: {e}\")\n","        return f\"The Auditor found some discrepancies (API error: {e}) and couldn't complete the report.\"\n","\n","# ## Green Light Go \"Traffic Light\" Workflow (with Scribe and Auditor)\n","\n","if __name__ == \"__main__\":\n","    if not client:\n","        print(\"Critical Error: OpenAI client failed to initialize. Green Light Go cannot operate.\")\n","        # Exit if client is not available, as nothing else will work.\n","    else:\n","        print(generate_glg_skit())\n","        print(\"\\nGreen Light Go AI Assistant - Ready for your core concept.\")\n","        user_prompt = input(\"Pitch your core concept (or type 'build glg' to see how the system describes itself): \")\n","\n","        if not user_prompt:\n","            print(\"No concept pitched. Please provide a core concept to start.\")\n","        elif user_prompt.lower() == \"build glg\":\n","            print(\"\\n--- Green Light Go Team Describing How to Build Themselves ---\")\n","            luminary_response_list = the_luminary_agent(\"how to automate idea generation for a system like Green Light Go\", num_ideas=1)\n","            anchor_response_dict = the_anchor_agent(\"technical feasibility of building the core Green Light Go agent interaction and scoring logic\")\n","            # For navigator, provide a dummy assessment that makes sense in this context\n","            navigator_dummy_anchor_assessment = {\"analysis\": \"Initial concept for internal system build.\", \"score\": 7}\n","            navigator_response_dict = the_yellow_light_navigator_agent(\n","                \"strategy for developing and integrating the Green Light Go agent system\",\n","                navigator_dummy_anchor_assessment\n","            )\n","            catalyst_response_text = the_catalyst_agent(\"unconventional ways to enhance or future-proof the Green Light Go system itself\")\n","\n","            luminary_text = 'The Luminary is pondering how to spark the system...'\n","            if luminary_response_list and isinstance(luminary_response_list, list) and len(luminary_response_list) > 0:\n","                luminary_text = f\"To automate idea generation, I propose: {luminary_response_list[0]}\"\n","            elif luminary_response_list is not None: # Empty list returned\n","                luminary_text = \"The Luminary had many thoughts but none coalesced into a concrete first step for system generation.\"\n","\n","\n","            anchor_text = 'The Anchor is ensuring the system foundation is solid...'\n","            if anchor_response_dict and isinstance(anchor_response_dict, dict):\n","                anchor_text = f\"For feasibility, my analysis is: {anchor_response_dict.get('analysis', 'Analysis pending.')} (Score: {anchor_response_dict.get('score', 'N/A')}/10)\"\n","            elif anchor_response_dict: # Error string\n","                 anchor_text = str(anchor_response_dict)\n","\n","\n","            navigator_text = 'The Yellow Light Navigator is charting the course for the system...'\n","            if navigator_response_dict and isinstance(navigator_response_dict, dict):\n","                nav_rec = navigator_response_dict.get('recommendation', 'N/A')\n","                nav_jus = navigator_response_dict.get('justification', 'N/A')\n","                nav_steps = navigator_response_dict.get('strategic_steps', 'N/A')\n","                navigator_text = f\"My strategic take on building GLG: Recommendation: {nav_rec}. Justification: {nav_jus}. Initial Steps: {nav_steps}\"\n","            elif navigator_response_dict: # Error string\n","                navigator_text = str(navigator_response_dict)\n","\n","\n","            catalyst_text = 'The Catalyst is looking for the hidden spark in the system design...'\n","            if catalyst_response_text:\n","                catalyst_text = f\"Considering unconventional angles for GLG: {catalyst_response_text}\"\n","            else: # None or empty string from catalyst\n","                catalyst_text = \"The Catalyst offered no further insights at this time.\"\n","\n","\n","            conversation = f\"\"\"\n","The Luminary: {luminary_text}\n","\n","The Anchor: {anchor_text}\n","\n","The Yellow Light Navigator: {navigator_text}\n","\n","The Catalyst: {catalyst_text}\n","            \"\"\"\n","            print(\"\\n--- Raw Conversation ---\")\n","            print(conversation)\n","\n","            print(\"\\n--- The Scribe is Generating an Executive Summary ---\")\n","            executive_summary = the_scribe_agent(conversation)\n","            print(f\"\\nExecutive Summary:\\n{executive_summary}\")\n","\n","            print(\"\\n--- The Auditor is Reviewing the Summary ---\")\n","            auditor_report = the_auditor_agent(conversation, executive_summary)\n","            print(f\"\\nAuditor's Report:\\n{auditor_report}\")\n","\n","        else: # Process user's pitched core concept\n","            print(f\"\\nProcessing your core concept: \\\"{user_prompt}\\\"\")\n","            print(\"The Luminary (Green Light Go) is brainstorming 10 ideas...\\n\")\n","            initial_ideas_data = []\n","            ideas = the_luminary_agent(user_prompt, num_ideas=10)\n","\n","            if ideas and isinstance(ideas, list) and len(ideas) > 0:\n","                print(\"\\n--- Initial Pitches and Anchor Assessments ---\")\n","                for i, idea_text in enumerate(ideas):\n","                    print(f\"\\nInitial Idea {i+1}: {idea_text}\")\n","                    anchor_assessment = the_anchor_agent(idea_text)\n","\n","                    anchor_analysis_display = \"Analysis unavailable from Anchor.\"\n","                    anchor_score_display = \"N/A\"\n","\n","                    if anchor_assessment and isinstance(anchor_assessment, dict):\n","                        anchor_analysis_display = anchor_assessment.get('analysis', anchor_analysis_display)\n","                        anchor_score_display = anchor_assessment.get('score', anchor_score_display)\n","                    elif anchor_assessment: # It was an error string from the agent\n","                        anchor_analysis_display = str(anchor_assessment)\n","\n","                    print(f\"Anchor's Assessment: {anchor_analysis_display} (Score: {anchor_score_display}/10)\\n\")\n","                    initial_ideas_data.append({\n","                        \"id\": i + 1,\n","                        \"idea\": idea_text,\n","                        \"score\": anchor_score_display, # Store the display string or actual score\n","                        \"feedback\": anchor_analysis_display\n","                    })\n","\n","                yellow_light_pool = []\n","                red_light_pool = []\n","\n","                print(\"\\n--- Yellow Light Navigator Initial Review ---\")\n","                for item in initial_ideas_data:\n","                    # Prepare anchor data for the navigator; navigator expects score and analysis\n","                    anchor_data_for_navigator = {\n","                        \"analysis\": item['feedback'], # This is the analysis text or error string\n","                        \"score\": item['score'] # This could be 'N/A' or a number\n","                    }\n","                    navigator_review = the_yellow_light_navigator_agent(item['idea'], anchor_data_for_navigator)\n","\n","                    print(f\"\\nReviewing Idea {item['id']}: {item['idea']}\")\n","                    if navigator_review and isinstance(navigator_review, dict):\n","                        recommendation = navigator_review.get('recommendation', 'Error')\n","                        justification = navigator_review.get('justification', 'Justification unavailable.')\n","                        strategic_steps = navigator_review.get('strategic_steps', 'No strategic steps provided.')\n","\n","                        print(f\"  Recommendation: {recommendation}\")\n","                        print(f\"  Justification: {justification}\")\n","\n","                        if recommendation.lower() == \"go\":\n","                            print(f\"  Initial Strategic Steps: {strategic_steps}\")\n","                            yellow_light_pool.append({\n","                                \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                                \"feedback\": item['feedback'], \"navigator_steps\": strategic_steps\n","                            })\n","                        else:\n","                            red_light_pool.append({\n","                                \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                                \"feedback\": item['feedback'], \"navigator_recommendation\": recommendation\n","                            })\n","                    else:\n","                        # Handle case where navigator_review itself is an error string or None\n","                        error_message = str(navigator_review) if navigator_review else \"Navigator agent failed to produce a review.\"\n","                        print(f\"  Recommendation: Error processing (Details: {error_message})\")\n","                        print(f\"  Justification: {error_message}\")\n","                        red_light_pool.append({\n","                            \"id\": item['id'], \"idea\": item['idea'], \"score\": item['score'],\n","                            \"feedback\": item['feedback'], \"navigator_error\": error_message\n","                        })\n","\n","                print(\"\\n--- Yellow Light Pool (Ideas Moving Forward for Strategic Development) ---\")\n","                if yellow_light_pool:\n","                    for item in yellow_light_pool:\n","                        print(f\"\\nIdea {item['id']}: {item['idea']} (Initial Anchor Score: {item['score']}/10)\")\n","                        print(f\"  Initial Navigator Steps: {item['navigator_steps']}\")\n","                else:\n","                    print(\"No ideas made it to the Yellow Light pool in this round.\")\n","\n","                print(\"\\n--- Red Light Pool (Ideas Currently On Hold or Rejected) ---\")\n","                if red_light_pool:\n","                    for item in red_light_pool:\n","                        print(f\"\\nIdea {item['id']}: {item['idea']} (Initial Anchor Score: {item['score']}/10)\")\n","                        if \"navigator_recommendation\" in item:\n","                             print(f\"  Navigator Recommendation: {item['navigator_recommendation']}\")\n","                        if \"navigator_error\" in item:\n","                             print(f\"  Navigator Error: {item['navigator_error']}\")\n","                        print(\"  The Catalyst is now pondering this Red Light idea...\")\n","                        catalyst_analysis = the_catalyst_agent(item['idea'])\n","                        catalyst_display_text = catalyst_analysis if catalyst_analysis and catalyst_analysis.strip() else \"The Catalyst offered no further insights or found no hidden connections at this time.\"\n","                        print(f\"  Catalyst's Thoughts:\\n    {catalyst_display_text.replace('\\n', '\\n    ')}\\n\")\n","                else:\n","                    print(\"No ideas ended up in the Red Light pool this round.\")\n","\n","                print(\"\\n--- Next Steps: Further development of Yellow Light ideas would typically involve deeper dives and user interaction. ---\")\n","\n","            elif ideas is None:\n","                print(\"The Luminary couldn't brainstorm ideas due to an error. Please check the console for details (e.g., API key, network).\")\n","            else: # Luminary returned empty list\n","                print(\"The Luminary brainstormed, but no specific ideas were generated for your concept. Try rephrasing or a different concept.\")\n","# End of Green Light Go Script\n","\n","                print(\"\\n--- Next Steps: Further development of Yellow Light ideas would typically involve deeper dives and user interaction. ---\")\n","\n","            elif ideas is None:\n","                print(\"The Luminary couldn't brainstorm ideas due to an error. Please check the console for details (e.g., API key, network).\")\n","            else: # Luminary returned empty list\n","                print(\"The Luminary brainstormed, but no specific ideas were generated for your concept. Try rephrasing or a different concept.\")\n","# End of Green Light Go Script\n","\n","                print(\"\\n--- Next Steps: Further development of Yellow Light ideas would typically involve deeper dives and user interaction. ---\")\n","\n","            elif ideas is None:\n","                print(\"The Luminary couldn't brainstorm ideas due to an error. Please check the console for details (e.g., API key, network).\")\n","            else: # Luminary returned empty list\n","                print(\"The Luminary brainstormed, but no specific ideas were generated for your concept. Try rephrasing or a different concept.\")\n","# End of Green Light Go Script"]}]}